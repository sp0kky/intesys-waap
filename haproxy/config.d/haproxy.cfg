global
  log stdout format raw local0 info
  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
  stats timeout 30s
#  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
#  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
#  ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
#  ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
#  ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
#  ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
#  ssl-dh-param-file /usr/local/etc/haproxy/dhparam
  maxconn 100

defaults
  mode http
  timeout client 10s
  timeout connect 5s
  timeout server 10s
  timeout http-request 10s
  log global
#  log	global
#  mode	http
#  option	httplog
#  option	dontlognull
#  timeout connect 5s
#  timeout queue	60s
#  timeout client  60s
#  timeout server  60s
#  timeout http-request 5s
#  errorfile 400 /usr/local/etc/haproxy/errors/400.http
#  errorfile 403 /usr/local/etc/haproxy/errors/403.http
#  errorfile 408 /usr/local/etc/haproxy/errors/408.http
#  errorfile 500 /usr/local/etc/haproxy/errors/500.http
#  errorfile 502 /usr/local/etc/haproxy/errors/502.http
#  errorfile 503 /usr/local/etc/haproxy/errors/503.http
#  errorfile 504 /usr/local/etc/haproxy/errors/504.http

frontend stats
  bind *:8084
  stats enable
  stats uri /stats
  stats realm HAProxy\ Statistics
  stats auth admin:DE9TGegM3aeGSmzH
  stats admin if TRUE

# WAAP and BOT Protection
backend per_ip_rates
  stick-table type ip size 1m expire 24h store gpc0,gpc0_rate(30s),gpt0,http_req_rate(3s),http_err_rate(5m)

backend per_ip_and_url_rates
  stick-table type binary len 8 size 1m expire 24h store http_req_rate(24h)

backend per_ip_and_url_bruteforce
  stick-table type binary len 8 size 1m expire 10m store http_req_rate(3m)

backend waap_be
  mode http
  log global
  option forwardfor
  option httpchk GET /status
  timeout server 25s
  server waf 127.0.0.1:80

# Default Backend points to blank page
backend default
  description "Default Empty HTTP"
  option forwardfor
  server www-default waf.local:80
  balance leastconn

#backend letsencrypt-backend
#  server letsencrypt letsencrypt.local:10380

frontend app_waf_fe
  description "Web Application and API Protection"
  option forwardfor
	bind haproxy.local:80 name HTTPbinding
	#bind haproxy.local:443 ssl crt /usr/local/etc/haproxy/ssl/ alpn h2,http/1.1 name HTTPbinding
	log /dev/log local4 info
	option httplog

	## Track source client IP rate
	http-request track-sc0 src table per_ip_rates
	## Track source IP + url accessed
	http-request track-sc1 url32+src table per_ip_and_url_rates unless { path_end .css .js .png .jpeg .gif }
	# Set the threshold to 15 within the time period
	acl exceeds_limit sc_gpc0_rate(0) gt 30
	http-request sc-set-gpt0(0) 1 if exceeds_limit

	## Track source IP + URL for bruteforce
	acl post_method method POST
	http-request track-sc2 base32+src table per_ip_and_url_bruteforce if post_method

	## Increase the new-page count if this is the first time
	http-request sc-inc-gpc0(0) if { sc_http_req_rate(1) eq 1 } !exceeds_limit

	### BOT & Scanners Protection
	http-request deny if { sc_http_err_rate(0) gt 30 }

	#http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload;"
	#http-request redirect scheme https if { hdr(host) -f /usr/local/etc/haproxy/fqdn.lst } !{ ssl_fc }

  #acl letsencrypt-acl path_beg /.well-known/acme-challenge/
  acl host_fqdn hdr(host) -f /usr/local/etc/haproxy/fqdn.lst

  #use_backend letsencrypt-backend if letsencrypt-acl
  use_backend waap_be if host_fqdn
  default_backend default

frontend app_fe
  description "HTTP/HTTPS web service"
  bind waf.local:10080 name HTTPbinding
#  stick-table type ip size 100k expire 30s store http_req_rate(10s)
#  tcp-request connection track-sc2 src
#  mode http
#  option httplog
#  option forwardfor
#	capture request header Host len 20
#	capture request header X-Forwarded-For len 20
#	capture request header Referer len 20
#	http-request set-header X-Forwarded-Proto %[src]
#	http-response add-header X-XSS-Protection "1; mode=block"
#	http-response set-header X-Content-Type-Options: nosniff
  acl host_fqdn hdr(host) -f /usr/local/etc/haproxy/fqdn.lst
  use_backend app_be if host_fqdn
  default_backend default

backend app_be
	description "Web Application Backend"
	option forwardfor
	server app_be backend.local:8080 maxconn 100 weight 100 fall 2 rise 2 check inter 2s ssl verify none
	balance leastconn
